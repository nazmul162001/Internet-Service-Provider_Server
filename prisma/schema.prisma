// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  role             String           @default("user")
  name             String           @default("")
  profileImage     String           @default("")
  phoneNumber      String           @default("")
  feedbacks        FeedBack[]
  reviews          Review[]
  bookings         Booking[]
  carts Cart[]
  blogs Blog[]

  @@map("users")
}

model Service {
  id   String  @id @default(uuid())
  name String   
  price Int
  category String
  images String
  district String
  location String
  description String
  channel String
  hdChannel String
  connectionCost Int
  status String
  reviews Review[]
  carts Cart[]
  bookings Booking[]

  @@map("services")
}

model Cart {
  id String @id @default(uuid())
  userId String
  serviceId String
  user User @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
  
}

model Review {
  id         String  @id @default(uuid())
  email      String
  userReview String
  userId String
  serviceId String
  service    Service @relation(fields: [serviceId], references: [id])
  user    User @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model FeedBack {
  id String @id @default(uuid())
  name String
  email String
  comments String
  userId String
  user User @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model Blog {
  id String @id @default(uuid())
  title String
  name String
  images String
  description String
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())

  @@map("blogs")
}

model Faq {
  id String @id @default(uuid())
  title String
  description String

  @@map("faqs")
}

model Booking {
  id String @id @default(uuid())
  name String
  phoneNumber String
  email String
  district String
  thana String
  address String
  category Category
  userId String
  serviceId String
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  service    Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  status String @default("pending")

  @@map("bookings")
}

enum Category {
  wifiInternet
  mobileConnection
  tvBox
  smartHome
  satelliteTv
  internet
  broadband
  business
}